export type LC_Viz = {
    ssr: Boolean;
    pointerEvents: Boolean;
    position: String;
    percentRange: Boolean;
    width: Number|undefined;
    height: Number|undefined;
    containerWidth: Number|undefined;
    containerHeight: Number|undefined;
    element: Element|undefined;
    x: String|Function|Number|Array<String|Function|Number>|undefined;
    y: String|Function|Number|Array<String|Function|Number>|undefined;
    z: String|Function|Number|Array<String|Function|Number>|undefined;
    r: String|Function|Number|Array<String|Function|Number>|undefined;
    data: Array<Object>|Object;
    xDomain: [min: Number|null, max: Number|null]|Array<String|Number>|Function|undefined;
    yDomain: [min: Number|null, max: Number|null]|Array<String|Number>|Function|undefined;
    zDomain: [min: Number|null, max: Number|null]|Array<String|Number>|Function|undefined;
    rDomain: [min: Number|null, max: Number|null]|Array<String|Number>|Function|undefined;
    xNice: Boolean|Number;
    yNice: Boolean|Number;
    zNice: Boolean|Number;
    rNice: Boolean;
    xPadding: [leftPixels: Number, rightPixels: Number]|undefined;
    yPadding: [leftPixels: Number, rightPixels: Number]|undefined;
    zPadding: [leftPixels: Number, rightPixels: Number]|undefined;
    rPadding: [leftPixels: Number, rightPixels: Number]|undefined;
    xScale: Function;
    yScale: Function;
    zScale: Function;
    rScale: Function;
    xRange: [min: Number, max: Number]|Function|Array<String|Number>|undefined;
    yRange: [min: Number, max: Number]|Function|Array<String|Number>|undefined;
    zRange: [min: Number, max: Number]|Function|Array<String|Number>|undefined;
    rRange: [min: Number, max: Number]|Function|Array<String|Number>|undefined;
    xReverse: Boolean|undefined;
    yReverse: Boolean|undefined;
    zReverse: Boolean|undefined;
    rReverse: Boolean|undefined;
    xDomainSort: Boolean;
    yDomainSort: Boolean;
    zDomainSort: Boolean;
    rDomainSort: Boolean;
    padding: {top?: Number, right?: Number, bottom?: Number, left?: Number};
    extents: { x?: [min: Number, max: Number], y?: [min: Number, max: Number], r?: [min: Number, max: Number], z?: [min: Number, max: Number] };
    flatData: Array<Object|Array<any>>|undefined;
    custom: Object;
    debug: Boolean;
    verbose: Boolean;
}